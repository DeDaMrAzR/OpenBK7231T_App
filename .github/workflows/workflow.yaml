name: Build App
on:
  push:
    branches:
      - '**'
  pull_request:
    branches: 
      - '**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  APP_NAME: ${{ github.event.repository.name }}

jobs:
  refs:
    name: Prepare CI Environment
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.refs.outputs.sha_short }}
      short_ref: ${{ steps.refs.outputs.short_ref }}
      version: ${{ steps.refs.outputs.version }}
      new_release: ${{ steps.refs.outputs.new_release }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive        
      - name: Update SDKs if required
        run: make update-submodules
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          semantic_version: 21
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            conventional-changelog-conventionalcommits@7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set outputs
        id: refs
        run: |
          export BRANCH=${GITHUB_REF#refs/*/}
          echo "branch: ${BRANCH}"
          export BRANCHTRANSLATED=$(echo ${BRANCH} | tr '/' '_')
          echo "short_ref: ${BRANCHTRANSLATED}"
          export VERSION=""
          if ${{ steps.semantic.outputs.new_release_published == 'true' }}; then
            export VERSION=${{ steps.semantic.outputs.new_release_version }}
          else
            export VERSION=${BRANCHTRANSLATED}_$(git rev-parse --short=12 HEAD)
          fi
          echo "new_release=${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_OUTPUT
          echo "short_ref=${BRANCHTRANSLATED}" >> $GITHUB_OUTPUT
          echo "sha_short=SHA-$(git rev-parse --short=12 HEAD)" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
  build2:
    name: Build Simulator
    needs: refs
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Checkout simulator repository
      run: |
        git clone https://github.com/openshwprojects/obkSimulator
        mkdir -p ./libs_for_simulator
        cp -r ./obkSimulator/simulator/libs_for_simulator/* ./libs_for_simulator
    - name: Build project
      run: msbuild openBeken_win32_mvsc2017.vcxproj /p:Configuration=Release /p:PlatformToolset=v143
    - name: Flatten build assets
      run: |
        mkdir -p flat
        cp ./Release/openBeken_win32.exe flat/
        cp ./obkSimulator/simulator/*.dll flat/
        cp ./run_*.bat flat/
        mkdir -p flat/examples
        cp -r ./obkSimulator/examples/* flat/examples/
    - name: Run unit tests
      run: |
        ./flat/openBeken_win32.exe -runUnitTests 2
    - name: Compress build assets
      run: |
        Compress-Archive -Path flat/* -DestinationPath obkSimulator_win32_${{ needs.refs.outputs.version }}.zip
    - name: Copy build assets
      run: |
        mkdir -Force output/${{ needs.refs.outputs.version }}
        cp obkSimulator_win32_${{ needs.refs.outputs.version }}.zip output/${{ needs.refs.outputs.version }}/obkSimulator_${{ needs.refs.outputs.version }}.zip
    - name: Upload build assets
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}
        path: output/${{ needs.refs.outputs.version }}/obkSimulator_${{ needs.refs.outputs.version }}.zip
  build:
        name: Build
        needs: refs
        runs-on: ubuntu-20.04
        strategy:
            fail-fast: false
            matrix:
                platform: [OpenBK7231T, OpenBK7231N, OpenXR809, OpenBL602, OpenW800, OpenW600, OpenLN882H]
        steps:
            - name: Source checkout
              uses: actions/checkout@v4
              with:
                  submodules: recursive
            - uses: actions/setup-python@v5
              with:
                  python-version: "3.10"
                  architecture: "x64"
            - name: Install dependencies
              run: |
                  sudo dpkg --add-architecture i386
                  sudo apt-get update
                  sudo apt-get -y install libc6-i386 make cmake gcc-arm-none-eabi
                  pip3 install pycryptodomex
                  pip3 install configobj
                  pip3 install toml
                  pip3 install fdt
            - run: ls -la
            - name: Run make
              run: make APP_VERSION=${{ needs.refs.outputs.version }} APP_NAME=${{ matrix.platform }} ${{ matrix.platform }}
            - name: Save build assets - OpenBK7231T_UA
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231T_UA_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231T_UA_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn
            - name: Save build assets - OpenBK7231T_UG
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231T_UG_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231T_UG_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn

            - name: Save build assets - OpenBK7231T_QIO
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231T_QIO_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231T_QIO_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn

            - name: Save build assets - OpenBK7231N_QIO
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231N_QIO_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231N_QIO_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OpenBK7231N_UG
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231N_UG_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231N_UG_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OpenBK7231M_QIO
              uses: actions/upload-artifact@v4
              with:
                name: OpenBK7231M_QIO_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/OpenBK7231M_QIO_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - RBL
              uses: actions/upload-artifact@v4
              with:
                name: RBL_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}.rbl
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - IMG
              uses: actions/upload-artifact@v4
              with:
                name: IMG_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}.img
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - BIN
              uses: actions/upload-artifact@v4
              with:
                name: BIN_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}.bin
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - FLS
              uses: actions/upload-artifact@v4
              with:
                name: FLS_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}.fls
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OTA IMG
              uses: actions/upload-artifact@v4
              with:
                name: OTA_IMG_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}_ota.img
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - GZ IMG
              uses: actions/upload-artifact@v4
              with:
                name: GZ_IMG_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}_gz.img
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OTA BIN
              uses: actions/upload-artifact@v4
              with:
                name: OTA_BIN_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}_OTA.bin
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OTA BIN XZ
              uses: actions/upload-artifact@v4
              with:
                name: OTA_BIN_XZ_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}_OTA.bin.xz
                compression-level: 0
                if-no-files-found: warn
            
            - name: Save build assets - OTA BIN XZ OTA
              uses: actions/upload-artifact@v4
              with:
                name: OTA_BIN_XZ_OTA_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
                path: output/${{ needs.refs.outputs.version }}/${{ matrix.platform }}_${{ needs.refs.outputs.version }}_OTA.bin.xz.ota
                compression-level: 0
                if-no-files-found: warn
#  merge:
#      runs-on: ubuntu-20.04
#      needs: [refs, build]
#      steps:
#          - name: Merge Artifacts
#            uses: actions/upload-artifact/merge@v4
#            with:
#              name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}
#              pattern: output/${{ needs.refs.outputs.version }}
#              delete-merged: true
  
  release:
    name: Semantic Release Images and Artifacts
    runs-on: ubuntu-20.04
    needs: [refs, build]
    if: always() && needs.refs.outputs.new_release == 'true' && (github.ref == 'refs/heads/main' || github.ref_name == 'alpha')
    steps:
        - name: Source checkout
          uses: actions/checkout@v4
        
        - name: Fetch build assets
          uses: actions/download-artifact@v4
          with:
              name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}
              path: output/${{ needs.refs.outputs.version }}
        
#        - name: Unzip Artifact
#          if: ${{ success() }}
#          run: |
#            unzip -o "output/${{ needs.refs.outputs.version }}/${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}.zip" -d "output/${{ needs.refs.outputs.version }}/"

        - name: Run Semantic Release
          id: semantic
          uses: cycjimmy/semantic-release-action@v4
          with:
              dry_run: false
              semantic_version: 21
              extra_plugins: |
                  @semantic-release/changelog
                  @semantic-release/git
                  conventional-changelog-conventionalcommits@7
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Echo Semantic Release Versions
          if: steps.semantic.outputs.new_release_published == 'true'
          run: |
              echo ${{ steps.semantic.outputs.new_release_version }}
              echo ${{ steps.semantic.outputs.new_release_major_version }}
              echo ${{ steps.semantic.outputs.new_release_minor_version }}
              echo ${{ steps.semantic.outputs.new_release_patch_version }}
