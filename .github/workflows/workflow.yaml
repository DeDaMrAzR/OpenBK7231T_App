name: Build App

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: 
      - '**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  APP_NAME: ${{ github.event.repository.name }}

jobs:
  refs:
    name: Prepare CI Environment
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.refs.outputs.sha_short }}
      short_ref: ${{ steps.refs.outputs.short_ref }}
      version: ${{ steps.refs.outputs.version }}
      new_release: ${{ steps.refs.outputs.new_release }}
    steps:
      - name: Source checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive        
      - name: Update SDKs if required
        run: make update-submodules
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          semantic_version: 21
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            conventional-changelog-conventionalcommits@7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set outputs
        id: refs
        run: |
          export BRANCH=${GITHUB_REF#refs/*/}
          echo "branch: ${BRANCH}"
          export BRANCHTRANSLATED=$(echo ${BRANCH} | tr '/' '_')
          echo "short_ref: ${BRANCHTRANSLATED}"
          export VERSION=""
          if [ "${{ steps.semantic.outputs.new_release_published }}" == "true" ]; then
            export VERSION=${{ steps.semantic.outputs.new_release_version }}
          else
            export VERSION=${BRANCHTRANSLATED}_$(git rev-parse --short=12 HEAD)
          fi
          echo "new_release=${{ steps.semantic.outputs.new_release_published }}" >> $GITHUB_OUTPUT
          echo "short_ref=${BRANCHTRANSLATED}" >> $GITHUB_OUTPUT
          echo "sha_short=SHA-$(git rev-parse --short=12 HEAD)" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  build2:
    name: Build Simulator
    needs: refs
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Checkout simulator repository
        run: |
          git clone https://github.com/openshwprojects/obkSimulator
          mkdir -p ./libs_for_simulator
          cp -r ./obkSimulator/simulator/libs_for_simulator/* ./libs_for_simulator

      - name: Build project
        run: msbuild openBeken_win32_mvsc2017.vcxproj /p:Configuration=Release /p:PlatformToolset=v143

      - name: Flatten build assets
        run: |
          mkdir -p flat
          cp ./Release/openBeken_win32.exe flat/
          cp ./obkSimulator/simulator/*.dll flat/
          cp ./run_*.bat flat/
          mkdir -p flat/examples
          cp -r ./obkSimulator/examples/* flat/examples/

      - name: Run unit tests
        run: ./flat/openBeken_win32.exe -runUnitTests 2

      - name: Compress build assets
        run: Compress-Archive -Path flat/* -DestinationPath obkSimulator_win32_${{ needs.refs.outputs.version }}.zip

      - name: Copy build assets
        run: |
          mkdir -Force output/${{ needs.refs.outputs.version }}
          cp obkSimulator_win32_${{ needs.refs.outputs.version }}.zip output/${{ needs.refs.outputs.version }}/obkSimulator_${{ needs.refs.outputs.version }}.zip

      - name: Upload build assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}
          path: output/${{ needs.refs.outputs.version }}/obkSimulator_${{ needs.refs.outputs.version }}.zip

  build:
    name: Build Firmware
    needs: refs
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        platform: [OpenBK7231T, OpenBK7231N, OpenXR809, OpenBL602, OpenW800, OpenW600, OpenLN882H]

    steps:
      - name: Source checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive        

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get -y install libc6-i386 make cmake gcc-arm-none-eabi
          pip3 install pycryptodomex configobj toml fdt

      - run: ls -la

      - name: Run make
        run: make APP_VERSION=${{ needs.refs.outputs.version }} APP_NAME=${{ matrix.platform }} ${{ matrix.platform }}

      - name: Save build assets
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}_${{ matrix.platform }}
          path: output/${{ needs.refs.outputs.version }}/

release:
  name: Semantic Release Images and Artifacts
  runs-on: ubuntu-20.04
  needs: [refs, build]
  if: always() && needs.refs.outputs.new_release == 'true' && (github.ref == 'refs/heads/main' || github.ref_name == 'alpha')

  steps:
    - name: Source checkout
      uses: actions/checkout@v4

    # Download and organize artifacts for each platform
    - name: Download all platform artifacts
      uses: actions/download-artifact@v4
      with:
        path: temp_files/
      continue-on-error: true

    - name: Move all artifacts into a single folder
      run: |
        mkdir -p output/all_platforms
        mv temp_files/** output/all_platforms/

    - name: Compress all files into a single zip file without nesting
      run: |
        cd output/all_platforms
        zip -r ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}_all_platforms.zip *

    - name: Upload all-platforms zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}_all_platforms
        path: output/all_platforms/${{ env.APP_NAME }}_${{ needs.refs.outputs.version }}_all_platforms.zip

    - name: Run Semantic Release
      id: semantic
      uses: cycjimmy/semantic-release-action@v4
      with:
        dry_run: false
        semantic_version: 21
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          conventional-changelog-conventionalcommits@7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Echo Semantic Release Versions
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo ${{ steps.semantic.outputs.new_release_version }}
        echo ${{ steps.semantic.outputs.new_release_major_version }}
        echo ${{ steps.semantic.outputs.new_release_minor_version }}
        echo ${{ steps.semantic.outputs.new_release_patch_version }}
